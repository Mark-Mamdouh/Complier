METHOD_BODY
STATEMENT_LIST  
STATEMENT STATEMENT_LIST_X  
DECLARATION STATEMENT_LIST_X  
PRIMITIVE_TYPE id ; STATEMENT_LIST_X  
float id ; STATEMENT_LIST_X  
match :: float
match :: id
Error:missing ;
Error:(illegal STATEMENT_LIST_X )– discard ,
STATEMENT STATEMENT_LIST_X  
ASSIGNMENT STATEMENT_LIST_X  
id = EXPRESSION ; STATEMENT_LIST_X  
match :: id
Error:missing =
Error:follow missing EXPRESSION
match :: ;
STATEMENT STATEMENT_LIST_X  
ASSIGNMENT STATEMENT_LIST_X  
id = EXPRESSION ; STATEMENT_LIST_X  
match :: id
Error:missing =
Error:(illegal EXPRESSION )– discard addop
Error:(illegal EXPRESSION )– discard addop
Error:follow missing EXPRESSION
match :: ;
STATEMENT STATEMENT_LIST_X  
ASSIGNMENT STATEMENT_LIST_X  
id = EXPRESSION ; STATEMENT_LIST_X  
match :: id
Error:missing =
Error:(illegal EXPRESSION )– discard addop
Error:(illegal EXPRESSION )– discard addop
Error:follow missing EXPRESSION
match :: ;
STATEMENT STATEMENT_LIST_X  
WHILE STATEMENT_LIST_X  
while ( EXPRESSION ) { STATEMENT } STATEMENT_LIST_X  
match :: while
match :: (
SIMPLE_EXPRESSION EXPRESSION_X ) { STATEMENT } STATEMENT_LIST_X  
TERM SIMPLE_EXPRESSION_X EXPRESSION_X ) { STATEMENT } STATEMENT_LIST_X  
FACTOR TERM_X SIMPLE_EXPRESSION_X EXPRESSION_X ) { STATEMENT } STATEMENT_LIST_X  
id TERM_X SIMPLE_EXPRESSION_X EXPRESSION_X ) { STATEMENT } STATEMENT_LIST_X  
match :: id
relop SIMPLE_EXPRESSION ) { STATEMENT } STATEMENT_LIST_X  
match :: relop
TERM SIMPLE_EXPRESSION_X ) { STATEMENT } STATEMENT_LIST_X  
FACTOR TERM_X SIMPLE_EXPRESSION_X ) { STATEMENT } STATEMENT_LIST_X  
num TERM_X SIMPLE_EXPRESSION_X ) { STATEMENT } STATEMENT_LIST_X  
match :: num
match :: )
match :: {
ASSIGNMENT } STATEMENT_LIST_X  
id = EXPRESSION ; } STATEMENT_LIST_X  
match :: id
match :: =
Error:(illegal EXPRESSION )– discard assign
SIMPLE_EXPRESSION EXPRESSION_X ; } STATEMENT_LIST_X  
TERM SIMPLE_EXPRESSION_X EXPRESSION_X ; } STATEMENT_LIST_X  
FACTOR TERM_X SIMPLE_EXPRESSION_X EXPRESSION_X ; } STATEMENT_LIST_X  
id TERM_X SIMPLE_EXPRESSION_X EXPRESSION_X ; } STATEMENT_LIST_X  
match :: id
addop TERM SIMPLE_EXPRESSION_X EXPRESSION_X ; } STATEMENT_LIST_X  
match :: addop
FACTOR TERM_X SIMPLE_EXPRESSION_X EXPRESSION_X ; } STATEMENT_LIST_X  
num TERM_X SIMPLE_EXPRESSION_X EXPRESSION_X ; } STATEMENT_LIST_X  
match :: num
match :: ;
match :: }
STATEMENT STATEMENT_LIST_X  
IF STATEMENT_LIST_X  
if ( EXPRESSION ) { STATEMENT } else { STATEMENT } STATEMENT_LIST_X  
match :: if
match :: (
SIMPLE_EXPRESSION EXPRESSION_X ) { STATEMENT } else { STATEMENT } STATEMENT_LIST_X  
TERM SIMPLE_EXPRESSION_X EXPRESSION_X ) { STATEMENT } else { STATEMENT } STATEMENT_LIST_X  
FACTOR TERM_X SIMPLE_EXPRESSION_X EXPRESSION_X ) { STATEMENT } else { STATEMENT } STATEMENT_LIST_X  
id TERM_X SIMPLE_EXPRESSION_X EXPRESSION_X ) { STATEMENT } else { STATEMENT } STATEMENT_LIST_X  
match :: id
relop SIMPLE_EXPRESSION ) { STATEMENT } else { STATEMENT } STATEMENT_LIST_X  
match :: relop
TERM SIMPLE_EXPRESSION_X ) { STATEMENT } else { STATEMENT } STATEMENT_LIST_X  
FACTOR TERM_X SIMPLE_EXPRESSION_X ) { STATEMENT } else { STATEMENT } STATEMENT_LIST_X  
num TERM_X SIMPLE_EXPRESSION_X ) { STATEMENT } else { STATEMENT } STATEMENT_LIST_X  
match :: num
match :: )
match :: {
ASSIGNMENT } else { STATEMENT } STATEMENT_LIST_X  
id = EXPRESSION ; } else { STATEMENT } STATEMENT_LIST_X  
match :: id
match :: =
Error:(illegal EXPRESSION )– discard assign
SIMPLE_EXPRESSION EXPRESSION_X ; } else { STATEMENT } STATEMENT_LIST_X  
TERM SIMPLE_EXPRESSION_X EXPRESSION_X ; } else { STATEMENT } STATEMENT_LIST_X  
FACTOR TERM_X SIMPLE_EXPRESSION_X EXPRESSION_X ; } else { STATEMENT } STATEMENT_LIST_X  
id TERM_X SIMPLE_EXPRESSION_X EXPRESSION_X ; } else { STATEMENT } STATEMENT_LIST_X  
match :: id
addop TERM SIMPLE_EXPRESSION_X EXPRESSION_X ; } else { STATEMENT } STATEMENT_LIST_X  
match :: addop
FACTOR TERM_X SIMPLE_EXPRESSION_X EXPRESSION_X ; } else { STATEMENT } STATEMENT_LIST_X  
num TERM_X SIMPLE_EXPRESSION_X EXPRESSION_X ; } else { STATEMENT } STATEMENT_LIST_X  
match :: num
match :: ;
match :: }
match :: else
match :: {
ASSIGNMENT } STATEMENT_LIST_X  
id = EXPRESSION ; } STATEMENT_LIST_X  
match :: id
match :: =
Error:(illegal EXPRESSION )– discard assign
SIMPLE_EXPRESSION EXPRESSION_X ; } STATEMENT_LIST_X  
TERM SIMPLE_EXPRESSION_X EXPRESSION_X ; } STATEMENT_LIST_X  
FACTOR TERM_X SIMPLE_EXPRESSION_X EXPRESSION_X ; } STATEMENT_LIST_X  
id TERM_X SIMPLE_EXPRESSION_X EXPRESSION_X ; } STATEMENT_LIST_X  
match :: id
addop TERM SIMPLE_EXPRESSION_X EXPRESSION_X ; } STATEMENT_LIST_X  
match :: addop
FACTOR TERM_X SIMPLE_EXPRESSION_X EXPRESSION_X ; } STATEMENT_LIST_X  
id TERM_X SIMPLE_EXPRESSION_X EXPRESSION_X ; } STATEMENT_LIST_X  
match :: id
match :: ;
match :: }
Accept
